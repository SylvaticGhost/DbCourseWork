@page "/routes"
@using Core.Enums
@using Core.Models
@using Core.Models.DTOs
@using global::Utils
@using Services
@using WebUI.Components.Elements
@using Field = Blazorise.Field
@using WebUI.Utils
@inject IRouteService RouteService

<body>
<TableEntity
    TEntity="Route"
    DisplayName="Маршрути"
    DeleteEntity="RouteService.Delete"
    Search="RouteService.Search"/>
<div class="mt-2">
    <h3>Додати запис</h3>
    <div class="flex flex-col">
        <Field ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
            <FieldLabel>Номер</FieldLabel>
            <FieldBody>
                <div class="d-flex">
                    <TextEdit
                        @bind-Text="@_numberPrefix"
                        id="numberPrefix"
                        MaxLength="2"
                        Size="Size.Small"
                        Style="width: 60px; margin-right: 5px;"
                        >
                    </TextEdit>
                    <NumericEdit TValue="short"
                        @bind-Value="_numberSuffix"
                        id="numberSuffix"
                        MaxLength="4"
                        Size="Size.Small"
                        Max="9999"
                    />
                </div>
            </FieldBody>
        </Field>
        <Field ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
            <FieldLabel>Назва</FieldLabel>
            <FieldBody>
                <TextEdit @bind-Text="@_name" id="name" Size="Size.Small"></TextEdit>
            </FieldBody>
        </Field>
        <Field ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
            <FieldLabel>Оператор</FieldLabel>
            <FieldBody>
                <EnumSelector Enum="typeof(Operators)" SelectedValue="_operator" SelectedValueChanged="o => _operator = OperatorsExtensions.ToOperator((string)o)"></EnumSelector>
            </FieldBody>
        </Field>
        <Button class="btn btn-primary" @onclick="CreateRoute">Додати</Button>
    </div>
</div>
</body>

@code {
    private TableEntity<Route>? _tableEntity;
    
    private readonly PageError _pageError = new();
    
    private string _numberPrefix = string.Empty;
    private short _numberSuffix = 1;

    private string Number => $"{_numberPrefix}{_numberSuffix}";

    private string _name;
    
    @* ReSharper disable once FieldCanBeMadeReadOnly.Local *@
    private Operators _operator = Operators.KpKyivMetropoliten;

    private async Task CreateRoute()
    {
        Console.WriteLine(_numberPrefix);
        var dto = new RouteCreateDto(Number, _name, _operator);
        Console.WriteLine($"Creteing route {dto.Number}, {dto.Name}, {dto.Operator}");
        var result = await RouteService.Create(dto);

        if (!result.IsSuccess)
        {
            Console.WriteLine("Error creating route");
            Console.WriteLine(result.JoinErrorMessage());
            _pageError.SetOnFailure(result);
            return;
        }
        
        ClearForm();

        if(_tableEntity is not null)
            await _tableEntity.ReloadData();
    }

    private void ClearForm()
    {
        _numberPrefix = string.Empty;
        _numberSuffix = 1;
        _name = string.Empty;
    }

}