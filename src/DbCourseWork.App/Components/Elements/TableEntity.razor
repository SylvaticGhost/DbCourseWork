@using System.Collections
@using System.Reflection
@using Ardalis.Result
@using Core.Models.Systems
@using global::Utils
@using global::Utils.Attributes
@using WebUI.Utils
@typeparam TEntity where TEntity : Core.Interfaces.IFormTableEntity

<PageTitle>@DisplayName</PageTitle>
<h3>@DisplayName</h3>
<CascadingValue Name="PageError" TValue="PageError" Value="_pageError">
    <body>
    <header>
        <CascadingPageError/>
        <div class="flex flex-row">
            <Pagination>
                <PaginationItem Disabled="@IsFirstPage()">
                    <PaginationLink @onclick="ToFirstPage">
                        <span aria-hidden="true">«««</span>
                    </PaginationLink>
                </PaginationItem>
                <PaginationItem Disabled="@IsFirstPage()">
                    <PaginationLink @onclick="PrevPage">
                        <span aria-hidden="true">«</span>
                    </PaginationLink>
                </PaginationItem>
                <PaginationItem Disabled="@true">
                    <PaginationLink>
                        <span aria-hidden="true">@_page</span>
                    </PaginationLink>
                </PaginationItem>
                <PaginationItem>
                    <PaginationLink @onclick="NextPage">
                        <span aria-hidden="true">»</span>
                    </PaginationLink>
                </PaginationItem>
            </Pagination>

            <div>
                <label>Розмір сторінки</label>
                <Select SelectedValue="@_pageSize" SelectedValueChanged="PageSizeChanged" TValue="short">
                    @foreach (byte v in PageSizes)
                    {
                        <SelectItem Value="@v">@v</SelectItem>
                    }
                </Select>
            </div>
        </div>
    </header>
    <main style="gap: 1rem;" class="flex flex-col">
        <Table Striped Hoverable>
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>@_formFields[0]</TableHeaderCell>
                    @for (var i = 1; i < _formFields.Length; i++)
                    {
                        int i1 = i;
                        <TableHeaderCell>@_formFields[i1]</TableHeaderCell>
                    }
                </TableRow>
            </TableHeader>
            <TableBody>
                @if (Loaded())
                {
                    foreach (var entity in _entities!)
                    {
                        string[] values = entity.RowDisplayValues;
                        <TableRow>
                            <TableRowHeader>
                                @if (entity.UrlOnPage != null)
                                {
                                    <a href="@entity.UrlOnPage">@values[0]</a>
                                }
                                else
                                {
                                    @values[0]
                                }
                            </TableRowHeader>
                            @for (int i = 1; i < values.Length; i++)
                            {
                                int i1 = i;
                                <TableRowCell>@values[i1]</TableRowCell>
                            }
                            @if (EditAndDelete)
                            {
                                <TableRowCell>
                                    <Button>
                                        <Icon Name="IconName.Pen"/>
                                    </Button>
                                </TableRowCell>
                                <TableRowCell>
                                    <Button>
                                        <Icon Name="IconName.Delete"/>
                                    </Button>
                                </TableRowCell>
                            }
                        </TableRow>
                    }
                }
            </TableBody>
        </Table>
        @* <div class="mt-2"> *@
        @*     <h3>Додати запис</h3> *@
        @*     <div class="flex flex-col mb-4"> *@
        @*         @foreach (var property in _properties) *@
        @*         { *@
        @*             var type = property.PropertyType; *@
        @*             <div> *@
        @*                 <label *@
        @*                     class="mr-2">@(property.GetValueFromAttribute<UkrFormFieldAttribute, string>(a => a.Name))</label> *@
        @*                 @if (type.IsEnum) *@
        @*                 { *@
        @*                     _insertFields[property.Name] = EnumExtensions.GetDefault(type);  *@
        @*                     <EnumSelector Enum="@(type)" SelectedValue="_insertFields[property.Name]"/> *@
        @*                 } *@
        @*                 else *@
        @*                 { *@
        @*                     <input style="width: 50%" type="text" onchange="@( (ChangeEventArgs args) => _insertFields[property.Name] = args.Value )"/> *@
        @*                 } *@
        @*             </div> *@
        @*         } *@
        @*         <Button class="btn btn-primary mt-2" @onclick="Insert">Додати</Button> *@
        @*     </div> *@
        @* </div> *@
    </main>
    </body>
</CascadingValue>

@code {
    private readonly Hashtable _insertFields = new();

    [Parameter]
    public string DisplayName { get; set; } = string.Empty;

    [Parameter]
    public required Func<SearchParameters, Task<Result<IEnumerable<TEntity>>>> Search { get; set; }

    [Parameter]
    public Func<object, Task<Result<TEntity>>>? InsertEntity { get; set; }

    [Parameter]
    public short[] PageSizes { get; set; } = [5, 10, 30];

    [Parameter]
    public bool EditAndDelete { get; set; } = true;

    [Parameter]
    public RenderFragment? InsertForm { get; set; }

    private readonly string[] _formFields = PropertyMapper.GetFormFields(typeof(TEntity));

    private readonly PropertyInfo[] _properties = PropertyMapper.GetByAttribute<UkrFormFieldAttribute>(typeof(TEntity));

    private readonly PageError _pageError = new();

    private readonly IReadOnlyDictionary<string, string> _ukrToEngDictionary = PropertyMapper.MapUkrToPropertyName(typeof(TEntity));

    private int _page = 1;
    private int _lastPage = 0;
    private short _pageSize = 10;

    private IEnumerable<TEntity>? _entities;

    private bool IsFirstPage() => _page == 1;

    private bool Loaded() => _entities != null;

    private async Task FetchData()
    {
        Result<IEnumerable<TEntity>> result = await Search(new SearchParameters(_page, _pageSize));

        if (result.IsSuccess)
            _entities = result.Value;
        else
            _pageError.SetOnFailure(result);

        if (_pageSize != 0 && result.Value.Count() < _pageSize)
            _lastPage = _page;
    }

    private Task PrevPage() => ChangePage(p => p - 1, _page == 1);

    private Task NextPage() => ChangePage(p => p + 1, _lastPage != 0 && _page + 1 > _lastPage);

    private Task ToFirstPage() => ChangePage(_ => 1, _page == 1);

    private async Task ChangePage(Func<int, int> changeFunc, bool forceReturn = false)
    {
        if (forceReturn) return;
        _page = changeFunc(_page);
        await FetchData();
        StateHasChanged();
    }

    protected override Task OnInitializedAsync() => FetchData();

    private async Task PageSizeChanged(short newSize)
    {
        _pageSize = newSize;
        _page = 1;
        await FetchData();
    }

    private async Task Insert()
    {
        foreach (DictionaryEntry dictionaryEntry in _insertFields)
        {
            Console.WriteLine($"{dictionaryEntry.Key}, {dictionaryEntry.Value}");
        }
    }

}
