@page "/RouteInfo/{Number}"
@using Ardalis.Result
@using Core.Models
@using Core.Models.Reports
@using Core.Models.Systems
@using DbCourseWork.Services
@using DbCourseWork.Utils
@using WebUI.Components.Elements
@using WebUI.Components.Elements.Reports
@inject IRouteService RouteService
@inject IRouteReportService RouteReportService

<CascadingValue Value="_pageError" Name="PageError">
    <CascadingPageError/>
    <RouteInfoView Route="@_route"/>
    <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; margin-top: 20px;">
        <Addons Style="width: 300px">
            <Addon AddonType="AddonType.Body">
                <DatePicker @ref="@datePicker" TValue="DateTime?" @bind-Dates="@_selectedDates"
                            Max="@DateTime.Today"
                            FirstDayOfWeek="DayOfWeek.Monday"
                            SelectionMode="DateInputSelectionMode.Range"/>
            </Addon>
            <Addon AddonType="AddonType.End">
                <Button Color="Color.Light" Clicked="@(() => datePicker.ToggleAsync())">
                    <Icon Name="IconName.CalendarDay"/>
                </Button>
            </Addon>
        </Addons>
        <button class="btn btn-primary" style="margin-top: 10px" @onclick="GenerateReport">Сформувати звіт</button>
    </div>
    @if (_report is not null)
    {
        <RouteReportDisplay RouteReport="_report"/>
    }
</CascadingValue>

@code {
    DatePicker<DateTime?> datePicker;
    
    [Parameter]
    public string? Number { get; set; }

    private readonly PageError _pageError = new();

    private Route? _route;

    IReadOnlyList<DateTime?>? _selectedDates;

    private RouteReport? _report;

    protected override async Task OnInitializedAsync()
    {
        var result = await RouteService.Find(Number ?? string.Empty);

        if (!result.IsSuccess)
        {
            _pageError.SetOnFailure(result);
            return;
        }

        _route = result.Value;
    }

    async Task GenerateReport()
    {
        var startDate = DateOnly.FromDateTime(_selectedDates?.FirstOrDefault() ?? DateTime.MinValue);
        var endDate = DateOnly.FromDateTime(_selectedDates?.LastOrDefault() ?? DateTime.MinValue);
        
        if (startDate == default || endDate == default)
        {
            _pageError.Set("Please select start and end date");
            return;
        }

        var param = new RouteReportParam(RouteNumber.Parse(Number!), startDate, endDate);

        Result<RouteReport> result = await RouteReportService.GetReport(param);

        if (!result.IsSuccess)
        {
            _pageError.SetOnFailure(result);
            return;
        }

        _report = result.Value;
        Console.WriteLine(_report);
        StateHasChanged();
    }

}