@page "/routes"
@using Core.Models
@using Core.Models.DTOs
@using Services
@using WebUI.Components.Elements
@using WebUI.Components.Elements.Forms
@inject IRouteService RouteService
@inherits MutableListPage<Route, RouteCreateDto, RouteUpsertParam>

<body>
<TableEntity
    @ref="TableEntity"
    TEntity="Route"
    DisplayName="Маршрути"
    DeleteEntity="RouteService.Delete"
    UpdateEntity="InvokeUpdateModel"
    Search="RouteService.Search"/>
<div class="mt-2">
    <h3>Додати запис</h3>
    <div class="flex flex-col">
        <RouteUpsertForm
            Param="UpsParam"
            Create="CreateRoute"
            />
    </div>
</div>
</body>

<Modal @ref="ModalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Модифікувати маршрут</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <RouteUpsertForm
            Param="UpsParam"
            Source="SelectedEntity"
            Update="UpdateRoute"
        />
        </ModalBody>
    </ModalContent>
</Modal>

@code {

    protected override RouteUpsertParam UpsParam { get; set; } = RouteUpsertParam.Empty();
    
    private Task CreateRoute(RouteUpsertParam param) =>
        ContentChange(r => RouteService.Create(r), param);

    private Task UpdateRoute(Route route, RouteUpsertParam param) =>
        ContentChange(r => RouteService.Update(route, r), param);
    
}